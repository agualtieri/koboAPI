#' @param seperator Separator used between select_multiple questions and their choices. Must be a regex expression. Default to forward slash
#' @return A dataframe containing the data, with no group names.
#'
#' @author Elliott Messeiller
#'
#' @export kobo_data
#'
kobo_data <- function(formid, user, pwd, api="https://kobo.humanitarianresponse.info", seperator="\\/") {
if(pwd == ""){pwd <- readline("Enter password:")}
if(pwd == "") stop("No password entered.")
all_forms <- kobo_all_forms(user, pwd, api)
old_id <- as.character(all_forms%>%dplyr::filter(uid == formid)%>%dplyr::select(old_id))
api_old <- gsub("kobo", "kc", api)
url_data <- paste0(api_old, "/api/v1/data/",old_id, ".csv")
raw_data <- httr::GET(url_data, httr::authenticate(user, pwd))
raw_data <- httr::content(raw_data, "raw", encoding = "UTF-8")
raw_data <- readr::read_csv(raw_data, na = c("", "NA", "n/a"))
raw_data <- kobo_noGroupsHeader(raw_data, formid, pwd, user, api)
#raw_data <- kobo_AddstartCol_SelectMultiple(raw_data)
#names(raw_data) <- gsub("\\.","\\/", names(raw_data))
return(raw_data)
}
#' @name kobo_noGroupsHeader
#' @rdname kobo_noGroupsHeader
#' @title  Remove groupes from dataframe header
#'
#' @description Remove groupes from dataframe header
#'
#' @param data The dataframe to be treated.
#' @param formid The ID of the form to be accessed (as a character string)
#' @param pwd Password of the Kobo account to use
#' @param user Optional. A single string indicating the username
#' @param api The URL at which the API can be accessed. Default to "kobo.humanitarianresponse.info"
#' @param seperator Separator used between select_multiple questions and their choices. Must be a regex expression. Default to forward slash
#' @return A dataframe without groups in headers.
#'
#' @author Elliott Messeiller
#'
#' @export kobo_noGroupsHeader
#'
kobo_noGroupsHeader <- function(data,formid, pwd, user, api="https://kobo.humanitarianresponse.info", seperator = "\\/") {
if(pwd == ""){pwd <- readline("Enter password:")}
if(pwd == "") stop("No password entered.")
form <-kobo_form(formid, user, pwd , api)
survey_sheet <- form$survey
groups <- paste0(as.list(survey_sheet%>%filter(type %in% c("begin_group", "begin group"))%>% select(name))[[1]],seperator)
groups <- c(groups, paste0("meta", seperator))
collapse_groups <- stringr::str_c(groups, collapse = "|")
groups_removed <- purrr::map(names(data), str_remove, collapse_groups)
names(data) <- groups_removed
return(data)
}
#' @name kobo_api_type
#' @rdname kobo_api_type
#' @title  Check the API type
#'
#' @description Check the API type
#' @param api The URL at which the API can be accessed.
#'
#' @return API type
#'
#' @author Elliott Messeiller
#'
#' @export kobo_api_type
#'
kobo_api_type <- function(api="https://kobo.humanitarianresponse.info"){
if(grepl("kf.kobotoolbox.org", api)){
api_type <- "kobotoolbox.org"
}else if(grepl("kobo.humanitarianresponse.info", api)){
api_type <- "humanitarianresponse.info"
}else{ stop("API not supported. Please use kf.kobotoolbox.org, or kobo.humanitarianresponse.info API. ")}
return(api_type)
}
#' @name kobo_create_export
#' @rdname kobo_create_export
#' @title  Create exports through API
#' @description Create exports (endpoint) through API for specified form. Exports allow to download the data via the new KPI
#'
#' @param asset_uid UID (ID) of the asset (form) for which an export is created.
#' @param kobo_user Username of the Kobo account to use.
#' @param Kobo_pw Password of the Kobo account to use.
#' @param type Type of exports to create: can be "csv" or "xls". Defaults to "csv"
#' @param lang Language to be used for the export. Defaults to "xml"
#' @param fields_from_all_versions Include or not all versions of the form. Logical string: "true" or "false". Defaults to "true"
#' @param hierarchy_in_labels Group names are displayed or not in labels of the dataframe. Logical string: "true" or "false". Defaults to "false"
#' @param group_sep Group header separator. Default "/".
#' @param api The URL at which the API can be accessed.
#'
#' @author Punya Prasad Sapkota (https://github.com/ppsapkota/), Elliott Messeiller
#'
#' @export kobo_create_export
kobo_create_export<-function(asset_uid, kobo_user, Kobo_pw, api="https://kobo.humanitarianresponse.info", type ="csv",lang="xml",fields_from_all_versions = "true",hierarchy_in_labels ="false",group_sep = "/"){
if(Kobo_pw == ""){Kobo_pw <- readline("Enter password:")}
if(Kobo_pw == "") stop("No password entered.")
api_url_export<-paste0(api,"/exports/")
api_url_asset<-paste0(api,"/assets/",asset_uid,"/")
api_url_export_asset<-paste0(api,"/exports/",asset_uid,"/")
#
d<-list(source=api_url_asset,
type=type,
lang=lang,
fields_from_all_versions=fields_from_all_versions,
hierarchy_in_labels=hierarchy_in_labels,
group_sep=group_sep)
#fetch data
result<-httr::POST (url=api_url_export,
body=d,
httr::authenticate(kobo_user,Kobo_pw),
httr::progress()
)
return(result$status_code)
}
#' @name kobo_AddstartCol_SelectMultiple
#' @rdname kobo_AddstartCol_SelectMultiple
#' @title  Adds a list column with the choices selected at the beggining of select_multiple questions
#' @description Adds a list column with the choices selected at the beggining of select_multiple questions
#' @param data The dataframe to be treated.
#' @param form A list with two objects: The "survey" sheet as a dataframe with all the questions variables, and the "choices" sheet as a dataframe with all the choices variables. See kobo_form()
#' @param seperator Separator used between select_multiple questions and their choices. Must be a regex expression. Default to forward slash
#' @return Returns data with the additional columns
#' @author Elliott Messeiller
#'
#' @export kobo_AddstartCol_SelectMultiple
#'
kobo_AddstartCol_SelectMultiple<- function(data, form, seperator = "\\/"){
survey <- form$survey
all_selectMultiple <- survey[survey$type == "select_multiple", "name"]
if(length(all_selectMultiple)==0){warning(paste0("No select_multiple question found with. Please double check that you have select_multiple qustions in your form."))}
expr_firstCol <- paste0(all_selectMultiple, seperator, ".*?$")
indices <- purrr::map(expr_firstCol, grep, names(data))
min_indices <- purrr::map_dbl(indices, min)
new_data <- purrr::map2(min_indices, all_selectMultiple, ~ add_column(data, .y = NA, .before = .x))
return(new_data)
}
#' @name nullToNA
#' @rdname nullToNA
#' @title Null to NA
#' @description Turns NULL blank cells to NAs
#' @param x object
#' @return Returns and NA where a NULL was present
#' @author Elliott Messeiller
#'
#' @export nullToNA
nullToNA <- function(x) {
x[sapply(x, is.null)] <- NA
return(x)
}
datasets <- kobo_all_forms("reach_yemen","KOBOyemREACH2017")
response <- kobo_data("aCeKQQhWH9USSoGY5EtARe","reach_yemen","KOBOyemREACH2017")
form <- kobo_form("aCeKQQhWH9USSoGY5EtARe","reach_yemen","KOBOyemREACH2017")
exports <- kobo_all_exports("reach_yemen","KOBOyemREACH2017")
export_created <- kobo_create_export("aCeKQQhWH9USSoGY5EtARe","reach_yemen","KOBOyemREACH2017")
response_multiple <- kobo_AddstartCol_SelectMultiple(response, form)
View(exports)
View(form)
form[["survey"]][["type"]]
expr_firstCol <- paste0(all_selectMultiple, seperator, ".*?$")
all_selectMultiple <- survey[survey$type == "select_multiple", "name"]
survey <- form$survey
all_selectMultiple <- survey[survey$type == "select_multiple", "name"]
View(survey)
expr_firstCol <- paste0(all_selectMultiple, seperator, ".*?$")
kobo_AddstartCol_SelectMultiple<- function(data, form, separator = "\\/"){
survey <- form$survey
all_selectMultiple <- survey[survey$type == "select_multiple", "name"]
if(length(all_selectMultiple)==0){warning(paste0("No select_multiple question found with. Please double check that you have select_multiple qustions in your form."))}
expr_firstCol <- paste0(all_selectMultiple, seperator, ".*?$")
indices <- purrr::map(expr_firstCol, grep, names(data))
min_indices <- purrr::map_dbl(indices, min)
new_data <- purrr::map2(min_indices, all_selectMultiple, ~ add_column(data, .y = NA, .before = .x))
return(new_data)
}
survey <- form$survey
all_selectMultiple <- survey[survey$type == "select_multiple", "name"]
expr_firstCol <- paste0(all_selectMultiple, seperator, ".*?$")
expr_firstCol <- paste0(all_selectMultiple, separator, ".*?$")
kobo_AddstartCol_SelectMultiple<- function(data, form, separator = "\\/"){
survey <- form$survey
all_selectMultiple <- survey[survey$type == "select_multiple", "name"]
if(length(all_selectMultiple)==0){warning(paste0("No select_multiple question found with. Please double check that you have select_multiple qustions in your form."))}
expr_firstCol <- paste0(all_selectMultiple, separator, ".*?$")
indices <- purrr::map(expr_firstCol, grep, names(data))
min_indices <- purrr::map_dbl(indices, min)
new_data <- purrr::map2(min_indices, all_selectMultiple, ~ add_column(data, .y = NA, .before = .x))
return(new_data)
}
response_multiple <- kobo_AddstartCol_SelectMultiple(response, form)
View(response_multiple)
rm(response_multiple)
View(survey)
separator <- "\\/"
expr_firstCol <- paste0(all_selectMultiple, separator, ".*?$")
indices <- purrr::map(expr_firstCol, grep, names(data))
View(indices)
min_indices <- purrr::map_dbl(indices, min)
View(indices)
indices <- purrr::map(expr_firstCol, grep, names(data))
min_indices <- purrr::map_dbl(indices, min)
new_data <- purrr::map2(min_indices, all_selectMultiple, ~ add_column(data, .y = NA, .before = .x))
return(new_data)
expr_firstCol
?map
expr_firstCol <- paste0(all_selectMultiple, separator) #".*?$"
indices <- purrr::map(expr_firstCol, grep, names(data))
View(indices)
min_indices <- purrr::map_dbl(indices, min)
?map_dbl
survey <- form$survey
all_selectMultiple <- survey[survey$type == "select_multiple", "name"]
expr_firstCol <- paste0(all_selectMultiple, separator) #".*?$"
View(datasets)
indices <- purrr::map(expr_firstCol, grep, names(data))
min_indices <- purrr::map_dbl(indices, min)
new_data <- purrr::map2(min_indices, all_selectMultiple, ~ add_column(data, .y = NA, .before = .x))
return(new_data)
new_data <- purrr::map2(min_indices, all_selectMultiple, ~ add_column(data, .y = NA, .before = .x))
all_selectMultiple
data <- response
expr_firstCol <- paste0(all_selectMultiple, separator) #".*?$"
indices <- purrr::map(expr_firstCol, grep, names(data))
min_indices <- purrr::map_dbl(indices, min)
new_data <- purrr::map2(min_indices, all_selectMultiple, ~ add_column(data, .y = NA, .before = .x))
return(new_data)
View(new_data)
View(new_data[[2]])
View(new_data)
?return
return(new_data)
expr_firstCol <- paste0(all_selectMultiple, separator, ".*?$")
indices <- purrr::map(expr_firstCol, grep, names(data))
min_indices <- purrr::map_dbl(indices, min)
new_data <- purrr::map2(min_indices, all_selectMultiple, ~ add_column(data, .y = NA, .before = .x))
return(new_data)
View(new_data)
View(indices)
indices[[2]]
View(new_data)
api <- "https://kobo.humanitarianresponse.info"
kobo_user <- "reach_yemen"
kobo_pwd <- "KOBOyemREACH2017"
api_url_export<-paste0(api,"/exports/")
asset_uid <- "aCeKQQhWH9USSoGY5EtARe"
api_url_asset<-paste0(api,"/assets/",asset_uid,"/")
api_url_export_asset<-paste0(api,"/exports/",asset_uid,"/")
#
d<-list(source=api_url_asset,
type=type,
lang=lang,
fields_from_all_versions=fields_from_all_versions,
hierarchy_in_labels=hierarchy_in_labels,
group_sep=group_sep)
type="csv"
lang="xml"
fields_from_all_versions = "true",hierarchy_in_labels ="false",group_sep = "/"
fields_from_all_versions = "true"
hierarchy_in_labels ="false"
group_sep = "/"
#
d<-list(source=api_url_asset,
type=type,
lang=lang,
fields_from_all_versions=fields_from_all_versions,
hierarchy_in_labels=hierarchy_in_labels,
group_sep=group_sep)
View(d)
#fetch data
result<-httr::POST (url=api_url_export,
body=d,
httr::authenticate(kobo_user,kobo_pw),
httr::progress()
)
#fetch data
result<-httr::POST (url=api_url_export,
body=d,
httr::authenticate(kobo_user,kobo_pwd),
httr::progress()
)
View(result)
return(result$status_code)
result[["status_code"]]
#fetch data
result<-httr::POST (url=api_url_asset,
body=d,
httr::authenticate(kobo_user,kobo_pwd),
httr::progress()
)
View(result)
return(result$status_code)
kobo_create_export<-function(asset_uid, kobo_user, kobo_pwd, api="https://kobo.humanitarianresponse.info", type ="csv",lang="xml",fields_from_all_versions = "true",hierarchy_in_labels ="false",group_sep = "/"){
if(Kobo_pw == ""){kobo_pw <- readline("Enter password:")}
if(Kobo_pw == "") stop("No password entered.")
api_url_export<-paste0(api,"/exports/")
api_url_asset<-paste0(api,"/assets/",asset_uid,"/")
api_url_export_asset<-paste0(api,"/exports/",asset_uid,"/")
#
d<-list(source=api_url_asset,
type=type,
lang=lang,
fields_from_all_versions=fields_from_all_versions,
hierarchy_in_labels=hierarchy_in_labels,
group_sep=group_sep)
#fetch data
result<-httr::POST (url=api_url_asset,
body=d,
httr::authenticate(kobo_user,kobo_pwd),
httr::progress()
)
return(result$status_code)
}
export_created <- kobo_create_export("aCeKQQhWH9USSoGY5EtARe","reach_yemen","KOBOyemREACH2017")
kobo_create_export<-function(asset_uid, kobo_user, kobo_pwd, api="https://kobo.humanitarianresponse.info", type ="csv",lang="xml",fields_from_all_versions = "true",hierarchy_in_labels ="false",group_sep = "/"){
if(kobo_pwd == ""){kobo_pwd <- readline("Enter password:")}
if(kobo_pwd == "") stop("No password entered.")
api_url_export<-paste0(api,"/exports/")
api_url_asset<-paste0(api,"/assets/",asset_uid,"/")
api_url_export_asset<-paste0(api,"/exports/",asset_uid,"/")
#
d<-list(source=api_url_asset,
type=type,
lang=lang,
fields_from_all_versions=fields_from_all_versions,
hierarchy_in_labels=hierarchy_in_labels,
group_sep=group_sep)
#fetch data
result<-httr::POST (url=api_url_asset,
body=d,
httr::authenticate(kobo_user,kobo_pwd),
httr::progress()
)
return(result$status_code)
}
export_created <- kobo_create_export("aCeKQQhWH9USSoGY5EtARe","reach_yemen","KOBOyemREACH2017")
kobo_create_export<-function(asset_uid, kobo_user, kobo_pwd, api="https://kobo.humanitarianresponse.info", type ="csv",lang="xml",fields_from_all_versions = "true",hierarchy_in_labels ="false",group_sep = "/"){
if(kobo_pwd == ""){kobo_pwd <- readline("Enter password:")}
if(kobo_pwd == "") stop("No password entered.")
api_url_export<-paste0(api,"/exports/")
api_url_asset<-paste0(api,"/assets/",asset_uid,"/")
api_url_export_asset<-paste0(api,"/exports/",asset_uid,"/")
#
d<-list(source=api_url_asset,
type=type,
lang=lang,
fields_from_all_versions=fields_from_all_versions,
hierarchy_in_labels=hierarchy_in_labels,
group_sep=group_sep)
#fetch data
result<-httr::POST (url=api_url_export_asset,
body=d,
httr::authenticate(kobo_user,kobo_pwd),
httr::progress()
)
return(result$status_code)
}
export_created <- kobo_create_export("aCeKQQhWH9USSoGY5EtARe","reach_yemen","KOBOyemREACH2017")
#fetch data
result<-httr::POST (url=api_url_export_asset,
body=d,
httr::authenticate(kobo_user,kobo_pwd),
httr::progress()
)
View(result)
result[["url"]]
kobo_create_export<-function(asset_uid, kobo_user, kobo_pwd, api="https://kobo.humanitarianresponse.info", type ="csv",lang="xml",fields_from_all_versions = "true",hierarchy_in_labels ="false",group_sep = "/"){
if(kobo_pwd == ""){kobo_pwd <- readline("Enter password:")}
if(kobo_pwd == "") stop("No password entered.")
api_url_export<-paste0(api,"/exports/")
api_url_asset<-paste0(api,"/assets/",asset_uid,"/")
api_url_export_asset<-paste0(api,"/exports/",asset_uid,"/")
#
d<-list(source=api_url_asset,
type=type,
lang=lang,
fields_from_all_versions=fields_from_all_versions,
hierarchy_in_labels=hierarchy_in_labels,
group_sep=group_sep)
#fetch data
result<-httr::POST (url=api_url_asset,
body=d,
httr::authenticate(kobo_user,kobo_pwd),
httr::progress()
)
return(result$status_code)
}
export_created <- kobo_create_export("aCeKQQhWH9USSoGY5EtARe","reach_yemen","KOBOyemREACH2017")
d<-list(source=api_url_asset,
type=type,
lang=lang,
fields_from_all_versions=fields_from_all_versions,
hierarchy_in_labels=hierarchy_in_labels,
group_sep=group_sep)
#
View(d)
#fetch data
result<-httr::POST (url=api_url_asset,
body=d,
httr::authenticate(kobo_user,kobo_pwd),
httr::progress()
)
type=".csv"
d<-list(source=api_url_asset,
type=type,
lang=lang,
fields_from_all_versions=fields_from_all_versions,
hierarchy_in_labels=hierarchy_in_labels,
group_sep=group_sep)
#fetch data
result<-httr::POST (url=api_url_asset,
body=d,
httr::authenticate(kobo_user,kobo_pwd),
httr::progress()
)
return(result$status_code)
View(result)
library(devtools)
source_url("https://raw.githubusercontent.com/ppsapkota/kobohr_apitoolbox/master/R/r_func_ps_kobo_utils.R")
url <-"https://kc.humanitarianresponse.info/api/v1/data.csv"
d_formlist_csv <- kobohr_getforms_csv (url,kobo_user, kobo_pw)
d_formlist_csv <- as.data.frame(d_formlist_csv)
d_formlist_csv <- kobohr_getforms_csv (url,kobo_user, kobo_pw)
library(tidyverse)
library(magrittr)
library(httr)
library(jsonlite)
kobo_user <- "reach_yemen"
kobo_pw <- "KOBOyemREACH2017"
## Download project list
d_formlist_csv <- kobohr_getforms_csv (url, kobo_user, kobo_pw)
View(d_formlist_csv)
d_formlist_csv <- as.data.frame(d_formlist_csv)
## Download data in csv format
d_raw <- kobohr_getdata_csv(url,kobo_user,kobo_pw)
data <- as.data.frame(d_raw)
View(data)
View(kobohr_getdata_csv)
View(data)
form_id <- "408888"
stat_url<- paste0('https://kc.humanitarianresponse.info/api/v1/stats/submissions/',form_id,'?group=a')
d_count_subm <- kobohr_count_submission (stat_url,kobo_user,kobo_pw)
View(kobohr_count_submission)
View(data)
form_id <- "aCeKQQhWH9USSoGY5EtARe"
stat_url<- paste0('https://kc.humanitarianresponse.info/api/v1/stats/submissions/',form_id,'?group=a')
d_count_subm <- kobohr_count_submission (stat_url, kobo_user, kobo_pw)
View(kobohr_count_submission)
View(data)
form_id <- "408888"
stat_url<- paste0("https://kc.humanitarianresponse.info/api/v1/stats/submissions/',form_id,'?group=a")
d_count_subm <- kobohr_count_submission (stat_url, kobo_user, kobo_pw)
if (d_count_subm>0){
#Example "https://kc.humanitarianresponse.info/api/v1/data/334455.csv"
d_raw<-kobohr_getdata_csv(url,kobo_user,Kobo_pw)
data<-as.data.frame(d_raw)
#do more here, for example save the data as a xls file.
}
form_id <- "408888"
stat_url<- paste0("https://kc.humanitarianresponse.info/api/v1/stats/submissions/',form_id")
d_count_subm <- kobohr_count_submission (stat_url, kobo_user, kobo_pw)
stat_url
stat_url <- paste0("https://kc.humanitarianresponse.info/api/v1/stats/submissions/",form_id)
stat_url
form_id <- "408888"
stat_url <- paste0("https://kc.humanitarianresponse.info/api/v1/stats/submissions/",form_id)
d_count_subm <- kobohr_count_submission (stat_url, kobo_user, kobo_pw)
form_id <- "408888"
url <- paste0("https://kc.humanitarianresponse.info/api/v1/data/",form_id,".csv"
d_raw <- kobohr_getdata_csv(url,kobo_user,kobo_pw)
data <- as.data.frame(d_raw)
form_id <- "408888"
url <- paste0("https://kc.humanitarianresponse.info/api/v1/data/",form_id,".csv")
d_raw <- kobohr_getdata_csv(url,kobo_user,kobo_pw)
data <- as.data.frame(d_raw)
View(data)
form_id <- "408888"
stat_url <- paste0("https://kc.humanitarianresponse.info/api/v1/stats/submissions/",form_id)
d_count_subm <- kobohr_count_submission (stat_url, kobo_user, kobo_pw)
form_id <- "408888"
stat_url <- paste0("https://kc.humanitarianresponse.info/api/v1/stats/submissions/",form_id,"?group=a")
d_count_subm <- kobohr_count_submission (stat_url, kobo_user, kobo_pw)
i
form_id <- "408888"
stat_url <- paste0("https://kc.humanitarianresponse.info/api/v1/stats/submissions/",form_id,"?group=a")
d_count_subm <- kobohr_count_submission (stat_url, kobo_user, kobo_pw)
stat_url
View(kobohr_count_submission)
if (d_count_subm>0){
#Example "https://kc.humanitarianresponse.info/api/v1/data/334455.csv"
d_raw<-kobohr_getdata_csv(url,kobo_user,Kobo_pw)
data<-as.data.frame(d_raw)
#do more here, for example save the data as a xls file.
}
kpi_url <- "https://kobo.humanitarianresponse.info/imports/"
kobo_form_xlsx <- "response.xlsx"
d_content<-kobohr_kpi_upload_xlsform(kpi_url,kobo_form_xlsx,kobo_user,kobo_pw)
import_url<-d_content$url
kpi_url <- "https://kobo.humanitarianresponse.info/imports/"
kobo_form_xlsx <- "response.xlsx"
d_content<-kobohr_kpi_upload_xlsform(kpi_url,kobo_form_xlsx,kobo_user,kobo_pw)
import_url<-d_content$url
?kobohr_kpi_upload_xlsform
roxygen2::roxygenise()
?str_replace
roxygen2::roxygenise()
roxygen2::roxygenise()
library(koboAPI)
roxygen2::roxygenise()
library(koboAPI)
library(koboAPI)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(koboAPI)
roxygen2::roxygenise()
library(koboAPI)
